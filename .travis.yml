language: cpp

sudo: required
dist: trusty

env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "WtCESGRHfDMwbgGxm0G68QY69bn5FbEpME6lvkKcHu6dZXDx9TqigI7mH5R92iUc1oTL3tpMd0hnZksoujcbCd68V1uaEkE4/kmkHZMwixE9G2OZQZlkO0QoFAyuK0FjyJFdq2PBoBlPocBBjIqcp5PZ8ShSEl7yxcV7lBuUzBZ73caBuWwoczbNFgaJ17155outORCuuSIS/74/yyOa72y+IQDRKH1J2qN49zOChpYgKgiGLkio3776ychJAy3wjgjO3Ae6QXxhhWbSMalgVUzq7fknX5Wa7ZjFVy7mmgCZxc09tCtykGXFMrXRz1dkJYmFrm+IMVYWQaTby6Z9iZ5qnKKo2Edzqlw5vjulFZIA6PMf0EzYRDIQgIzNIIOo4sBMAz2kwpnOilK7lRwUJjdLZjdPxAu2my4jk3fwSqk912hvOrweZm6bDgzKInjo8EFgXFm+LDpveUdjQGRt+Ib3AHF76cbKHC6T+cq07ZdWHingLwDK31mQrlzdPJ3qt2fvvycLuBi+jPEQ4kZqpzQbAl7WjkIQCib+6eioBfUWeIuopGF26QxeqI+eI7jWtXpIxs57Ag2alY1YqPbDJiQG7Ipj514QL9Gwa+yC6HiJPGi033LqIXzXNcCH4BKjr/czDASEozGgkiEG7RBaTYKVtVey9cJ+xOP6L19W2EU="

matrix:
  include:

    ###########################################################################
    # Clang on macOS.
    #

    #
    # Xcode 9.0 Debug with tests.
    #
#    - os: osx
#      env:
#        - CXX_COMPILER=clang++
#        - BUILD_TYPE=Debug
#      osx_image: xcode9.0
#      compiler: clang
#      script:
#        - cd "${TRAVIS_BUILD_DIR}"
#        - mkdir -p build && cd build
#        - conan install .. --build missing -s build_type=${BUILD_TYPE}
#        - cmake .. -DCMAKE_BUILD_TYPE:STRING=${BUILD_TYPE}
#        - cmake --build . --config ${BUILD_TYPE}
#      after_success:
#        - ctest --extra-verbose --parallel 2

    #
    # Xcode 9.0 Debug with Clang-Tidy.
    #
    - os: osx
      env:
        - CXX_COMPILER=clang++
        - BUILD_TYPE=Debug
        - ENABLE_CLANG_TIDY=TRUE
      osx_image: xcode9.0
      compiler: clang
      script:
        - cd "${TRAVIS_BUILD_DIR}"
        - mkdir -p build && cd build
        - conan install .. --build missing -s build_type=${BUILD_TYPE}
        - |
          cmake .. -DCMAKE_BUILD_TYPE:STRING=${BUILD_TYPE} \
            -DENABLE_CLANG_TIDY:BOOL=${ENABLE_CLANG_TIDY}
        - cmake --build . --config ${BUILD_TYPE}
      after_success:
        - ctest --extra-verbose --parallel 2

    ###########################################################################
    # GCC on Linux.
    #

    #
    # GCC 7 Debug with Codecov and Coveralls.
    #
#    - os: linux
#      env:
#        - CC_COMPILER=gcc-7
#        - CXX_COMPILER=g++-7
#        - BUILD_TYPE=Debug
#        - ENABLE_TESTING=TRUE
#        - ENABLE_COVERAGE=TRUE
#      addons: &gcc7
#        apt:
#          packages:
#            - gcc-7
#            - g++-7
#          sources:
#            - ubuntu-toolchain-r-test
#      before_install:
#        - pip install --user cpp-coveralls
#      script:
#        - cd "${TRAVIS_BUILD_DIR}"
#        - mkdir -p build && cd build
#        - |
#          conan install .. --build missing \
#            -s build_type=${BUILD_TYPE} \
#            -s compiler.libcxx=libstdc++11
#        - |
#          cmake .. \
#            -DCMAKE_BUILD_TYPE:STRING=${BUILD_MODE} \
#            -DENABLE_TESTING:BOOL=${ENABLE_TESTING} \
#            -DENABLE_COVERAGE:BOOL=${ENABLE_COVERAGE}
#        - cmake --build . --config ${BUILD_TYPE}
#      after_success:
#        - ctest --extra-verbose --parallel 2
#        - |
#          # Codecov - upload the report.
#          bash <(curl -s https://codecov.io/bash)
#          # Coveralls - upload the report.
#          cd ..
#          coveralls --build-root build --gcov-options '\-lp' \
#            -e build/external \
#            -e build/catch \
#            -e cmake \
#            -E ".*CMakeFiles.*"

    #
    # GCC 7 Debug with Cppcheck.
    #
#    - os: linux
#      env:
#        - CC_COMPILER=gcc-7
#        - CXX_COMPILER=g++-7
#        - BUILD_TYPE=Debug
#        - ENABLE_CPPCHECK=TRUE
#      addons: *gcc7
#      script:
#        - cd "${TRAVIS_BUILD_DIR}"
#        - mkdir -p build && cd build
#        - |
#          conan install .. --build missing \
#            -s build_type=${BUILD_TYPE} \
#            -s compiler.libcxx=libstdc++11
#        - |
#          cmake .. \
#            -DCMAKE_BUILD_TYPE:STRING=${BUILD_MODE} \
#            -DENABLE_CPPCHECK:BOOL=${ENABLE_CPPCHECK}
#        - cmake --build . --config ${BUILD_TYPE}
#      after_success:
#        - make check

    #
    # Coverity Scan
    #
    - os: linux
      env:
        - CC_COMPILER=gcc-7
        - CXX_COMPILER=g++-7
        - BUILD_TYPE=Debug
      addons:
        apt:
          packages:
            - gcc-7
            - g++-7
          sources:
            - ubuntu-toolchain-r-test
        coverity_scan:
          project:
            name: "SMelanko/smela"
            description: "A simple example of how to setup a complete CI environment for C and C++"
          notification_email: slava.melanko@gmail.com
          build_command_prepend:
            - cd "${TRAVIS_BUILD_DIR}"
            - mkdir -p build && cd build
            - conan install .. --build missing -s build_type=${BUILD_TYPE} -s compiler.libcxx=libstdc++11
            - cmake .. -DCMAKE_BUILD_TYPE:STRING=${BUILD_MODE}
          build_command: cmake --build . --config ${BUILD_TYPE}
          branch_pattern: master
      script:
        - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-

  exclude:
    - os: osx
      compiler: gcc
    - os: linux
      compiler: clang

install:
  # Set up the environment.
  - |
    if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
      # Set the ${CC} variable properly.
      export CC=${CC_COMPILER}
      ${CC} --version
    fi

  # Set the ${CXX} variable properly.
  - export CXX=${CXX_COMPILER}
  - ${CXX} --version

  # Dependencies required by the CI are installed in ${TRAVIS_BUILD_DIR}/deps/.
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p "${DEPS_DIR}" && cd "${DEPS_DIR}"
  # Install a recent CMake (unless already installed on macOS) and Conan.
  - |
    if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
      CMAKE_VERSION=3.10.0
      CMAKE_ARCH=cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz
      CMAKE_URL="https://cmake.org/files/v${CMAKE_VERSION%.[0-9]}/${CMAKE_ARCH}"
      mkdir cmake && travis_retry wget --no-check-certificate -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
      sudo pip install conan
    else
      brew update
      brew install cmake || brew upgrade cmake
      brew install conan || brew upgrade conan
    fi
