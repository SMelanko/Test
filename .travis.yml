language: cpp

sudo: required
dist: trusty

matrix:
  include:

    #
    # Clang on macOS.
    #

    # Xcode 7.3.
#1    - env: CXX_COMPILER=clang++ BUILD_TYPE=Debug
#1      os: osx
#1      osx_image: xcode7.3
#1      compiler: clang

#1    - env: CXX_COMPILER=clang++ BUILD_TYPE=Release
#1      os: osx
#1      osx_image: xcode7.3
#1      compiler: clang

    # Xcode 8.0.
#1    - env: CXX_COMPILER=clang++ BUILD_TYPE=Debug
#1      os: osx
#1      osx_image: xcode8.0
#1      compiler: clang

#1    - env: CXX_COMPILER=clang++ BUILD_TYPE=Release
#1      os: osx
#1      osx_image: xcode8.0
#1      compiler: clang

    # Xcode 8.1.
#1    - env: CXX_COMPILER=clang++ BUILD_TYPE=Debug
#1      os: osx
#1      osx_image: xcode8.1
#1      compiler: clang

#1    - env: CXX_COMPILER=clang++ BUILD_TYPE=Release
#1      os: osx
#1      osx_image: xcode8.1
#1      compiler: clang

    # Xcode 8.2.
#1    - env: CXX_COMPILER=clang++ BUILD_TYPE=Debug
#1      os: osx
#1      osx_image: xcode8.2
#1      compiler: clang

#1    - env: CXX_COMPILER=clang++ BUILD_TYPE=Release
#1      os: osx
#1      osx_image: xcode8.2
#1      compiler: clang

    # Xcode 8.3.
#1    - env: CXX_COMPILER=clang++ BUILD_TYPE=Debug
#1      os: osx
#1      osx_image: xcode8.3
#1      compiler: clang

#1    - env: CXX_COMPILER=clang++ BUILD_TYPE=Release
#1      os: osx
#1      osx_image: xcode8.3
#1      compiler: clang

    # Xcode 9.0.
#1    - env: CXX_COMPILER=clang++ BUILD_TYPE=Debug
#1      os: osx
#1      osx_image: xcode9.0
#1      compiler: clang

#1    - env: CXX_COMPILER=clang++ BUILD_TYPE=Release
#1      os: osx
#1      osx_image: xcode9.0
#1      compiler: clang

    # Xcode 9.1.
#1    - env: CXX_COMPILER=clang++ BUILD_TYPE=Debug
#1      os: osx
#1      osx_image: xcode9.1
#1      compiler: clang

#1    - env: CXX_COMPILER=clang++ BUILD_TYPE=Release
#1      os: osx
#1      osx_image: xcode9.1
#1      compiler: clang

    #
    # GCC on Linux.
    #

    # GCC 5.
#1    - env: CXX_COMPILER=g++-5 CC_COMPILER=gcc-5 BUILD_TYPE=Debug
#1      os: linux
#1      addons: &gcc5
#1        apt:
#1          packages: g++-5
#1          sources: ubuntu-toolchain-r-test

#1    - env: CXX_COMPILER=g++-5 CC_COMPILER=gcc-5 BUILD_TYPE=Release
#1      os: linux
#1      addons: *gcc5

    # GCC 6.
#1    - env: CXX_COMPILER=g++-6 CC_COMPILER=gcc-6 BUILD_TYPE=Debug
#1      os: linux
#1      addons: &gcc6
#1        apt:
#1          packages: g++-6
#1          sources: ubuntu-toolchain-r-test

#1    - env: CXX_COMPILER=g++-6 CC_COMPILER=gcc-6 BUILD_TYPE=Release
#1      os: linux
#1      addons: *gcc6

    # GCC 7.
    - env: CXX_COMPILER=g++-7 CC_COMPILER=gcc-7 BUILD_TYPE=Debug
      os: linux
      addons: &gcc7
        apt:
          packages:
          - g++-7
          - lcov
          sources: ubuntu-toolchain-r-test

    - env: CXX_COMPILER=g++-7 CC_COMPILER=gcc-7 BUILD_TYPE=Release
      os: linux
      addons: *gcc7

  exclude:
    - os: osx
      compiler: gcc
    - os: linux
      compiler: clang

before_install:
  - pip install --user cpp-coveralls

install:
  # Set the ${CXX} variable properly.
  - export CXX=${CXX_COMPILER}
  - ${CXX} --version
  # Set the ${CC} variable properly.
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      export CC=${CC_COMPILER}
      ${CC} --version
    fi

  # Dependencies required by the CI are installed in ${TRAVIS_BUILD_DIR}/deps/.
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p "${DEPS_DIR}"
  - cd "${DEPS_DIR}"

  # Install a recent CMake (unless already installed on macOS) and Conan.
  - CMAKE_VERSION=3.9.5
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v${CMAKE_VERSION%.[0-9]}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
      sudo pip install conan
      sudo pip install --user cpp-coveralls 
    else
      brew update
      brew install cmake || brew upgrade cmake
      brew install conan || brew upgrade conan
    fi

before_script:
  - conan --version
  - cmake --version
  - cd "${TRAVIS_BUILD_DIR}"
  - mkdir -p build && cd build
  - conan install .. --build missing -s build_type=${BUILD_TYPE}
  - cmake .. -DCMAKE_BUILD_TYPE:STRING=${BUILD_MODE} -DENABLE_COVERAGE:BOOL=TRUE

script:
  - cmake --build . --config ${BUILD_TYPE}
  - ctest --extra-verbose --parallel 2
  
after_success:
  - lcov --directory . --capture --output-file coverage.info # capture coverage info
  - lcov --remove coverage.info '/usr/*' --output-file coverage.info # filter out system
  - lcov --list coverage.info # debug info
  - bash <(curl -s https://codecov.io/bash)
  #- coveralls --build-root . --gcov-options '\-lp' -e external
  - coveralls --root . -E ".*CMakeFiles.*"
